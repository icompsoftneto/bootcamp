COMANDOS TERMINAL ATT:
yarn add express
yarn add typescript -D
yarn tsc --init
yarn add @types/[LIB COM ERRO] -D

yarn add ts-node-dev -D //converte para JavaScript e atualiza o código automaticamente

yarn webpack serve --mode development
yarn dev
yarn add @babel/core @babel/preset-env @babel/preset-react webpack webpack-cli

npx react-native run-android

PARA INICIAR DOCKER:
docker ps -a
copiar ID 
docker start [ID]
docker ps //ver se esta executando

==========================MODULO 1================================
Node.js:
 Não lidamos com eventos do usuário final
 Rotas e integrações
Plataforma (não linguagem)
Construída em cima da V8
Comparável a PHP / Ruby / Python / Go

NPM:
Instalar bibliotecas de terceiros
Fornecer bibliotecas
Por que utilizaremos o Yarn?
Comparáveis:
 Composer do PHP
 Gems do Ruby
 PIP do Python

Características do Node:
Arquitetura Event-loop
 Baseada em eventos (rotas na maioria das vezes)
 Call stack
Node é single-thread
 C++ por trás
 Background threads
Non-blocking I/O

Frameworks:
ExpressJS como base
 Sem opiniao (aberto)
 Otimo para iniciar (aprender poucos conceitos)
 Micro-serviços
Frameworks opinados
 AdonisJS
 NestJS
-------------------------------------------------------------------
Como funciona API:
Fluxo de requisição e resposta
 Requisição é feita por um cliente (brownser)
 Resposta retornada através de estrutura de dados
 Cliente recebe respostas e processa resultado

As rotas utilizam métodos HTTP:
MÉTODO || RECURSO/ROTA || PARÂMETRO
 GET http://minhaapi.com/users
 POST http://minhaapi.com/users
 PUT http://minhaapi.com/users/1
 DELETE  http://minhaapi.com/users/1

Benefícios
Múltiplos clientes (front-end) utilizando o mesmo back-end
Protocolo de comunicação padronizado
 Mesma estrutura para web / mobile / API publica
 Comunicação com serviços externos

JSON (JavaScript Object Notation)

Conteúdo da requisição:
GET http://api.com/company/1/users?page=2
 ROUTE: company/users
 ROUTE PARAMS: 1
 QUERY PARAMS: ?page=2

HTTP Codes:
Código de 3 dígitos que significa qual foi o status da resposta:

1xx: INFORMATIVO
2xx: SUCESSO (TUDO OK)
 200: success
 201: created
3xx: REDIRECIONAMENTO
 301: moved permanently
 302: moved
4xx: ERROS DO CLIENTE (ALGO FALTANDO NA SUA REQUISIÇÃO PRO SERVIDOR)
 400: bad request
 401: unauthorized
 404: not found
5xx: ERROS DE SERVIDOR
 400: internal server error
--------------------------------------------------------------------
MÉTODOS HTTP:
GET: buscar informacoes do backend
POST: criar uma informacao no backend
PUT/PATCH: alterar informacao no backend
DELETE: deletar informacao no backend
--------------------------------------------------------------------
TIPOS DE PARAMETROS:
Query Params: filtros e paginacao
Route Params: identificar recursos (atualizar ou deletar)
Request Body: conteudo na hora de criar ou editar um recurso (atraves de JSON)
--------------------------------------------------------------------
MIDDLEWARE: é uma função
Interceptador de requisicoes que interrompe totalmente a 
requisicao ou altera dados da requisicao

============================MODULO 2================================
React:

O que é?
Biblioteca para construção de interfaces
Utilizado para construcao de single-page applications
Podemos chamar de Framework
Tudo fica dentro do Javascript

React: Biblioteca do React
ReactJS: Comportamento do React diretamente no browser
React Native: Soma de React com outra biblioteca que lida com elementos nativos

VANTAGENS: 
Organização do codigo
 Componentizacao (dividir partes do codigo em componentes que tem especialidades especificas)
Divisao de responsabilidades
 Back-end: regra de negocio
 Front-end: interface
Uma API, multiplos clientes (back-end para mobile e web)
Programação declaravita (passamos o resultado que esperamos e ela se comporta de acordo)

IMPERATIVO vs DECLARATIVO
Imperativo: Usar javascript para descrever para o computador o que ele precisa fazer para montrar um elemento (compara com o estado anterior)
Declarativo: Não dá os passos para o browser montar, apenas dá as condições para mostrar ou não um elemento (não compara com o estado anterior)
------------------------------------------------------------------
JSX
Escrever HTML dentro do JavaScript
Com React podemos criar nossos proprios elementos
------------------------------------------------------------------
Babel/Webpack
O browser não entende todo esse codigo
O babel converte o código JavaScript de uma forma que o browser entenda
Webpack possui varias funcoes:
 Criacao do bundle, arquivo com todo o codigo da aplicacao (converte varios codigos JS em um unico codigo)
 Ensinar ao JavaScript como importar arquivos CSS, imagens e etc
 Live reload com Webpack Dev Server (Refresh automatico do browser) 
  [yarn webpack serve --mode development]
------------------------------------------------------------------
Babel: converter (transpilar) codigo do react para o codigo que o browser entenda

Console: yarn add @babel/core @babel/preset-env @babel/preset-react webpack webpack-cli

Webpack: para cada tipo de arquivo (.jd, .css, .png) converte o codigo de uma maneira diferente
 Loaders: babel-loader, css-loader, image-loader, file-loader... (algo utilizado pelo webpack para dar sentido ao JS)
------------------------------------------------------------------
JSX: HTML dentro do JavaScript
------------------------------------------------------------------
Conceito de Fragment:
criar um container para envolver dois ou mais componentes sem reproduzir nenhum efeito visual
------------------------------------------------------------------
CONCEITOS IMPORTANTES DO REACT
Componente:
Propriedade: alguma informacao que passa de um componente pai para componante filho
Estado & Imutabilidade: não podemos mutar variaveis (alterar formato, incluir ou excluir informacoes e maneira direta. precisa recriar)
------------------------------------------------------------------
*IMPORTANTE*
useState retorna um array com 2 posicoes
1: Variavel com seu valor inicial
2: Funcao para atualizarmos esse valor

==========================MODULO 3================================
React Native:

Versão do React para desenvolvimento mobile
Multiplataforma (o mesmo codigo roda no Android e IOS)
Podemos manipular cada plataforma de forma diferente
Interface nativa (não produz interface híbrida)
Código não é transpilado (não é totalmente convertido. Injeta dependencia no celular que passa a entender JS)
Outras plataformas migrando, Microsoft com Windows

Arquitetura:
JS -> Metro Bundler -> Bundle -> Bridge -> ANDROID e IOS

Sintaxe:
A declaracao de componentes é igual ao Web
Não usamos HTML e sim componentes próprios do React Native
Aplicamos estilo sem classes ou ID's
Todo texto é <Text/> e não existe estilizacao propria

O que é Expo?
SKD com um conjunto de funcionalidades prontas para usar no React Native (câmera, vídeo, integracoes)
Não é necessário configurar emulador
NÃO SERÁ UTILIZADO
 Limitação sobre o controle do código nativo
 Várias bibliotecas nao tem suporte para o Expo
 O Expo liberou seu conjunto de ferramentas prontas para serem utilizadas com projetos que não utilizam Expo
-----------------------------------------------------------------

View e Text:
View: div, footer, header, main, aside, section
Text: p, spam, strong, h1, h2, h3

Não possuem valor semantico (significado)
Não possuem estilizacao propria
 Tudo precisa ser feito atraves de CSS
Todos os componentes possuem por padrao "display: flex" (flex: 1, para aplicar à tela inteira)
-----------------------------------------------------------------
IOS com emulador: localhost
IOS com físico: IP da maquina no lugar do localhost
Android com Emulador: adb reverse tcp:3333 tcp:3333 (passando o IP da aplicacao host)
Android com Emulador: usar IP especifico 10.0.2.2 (Android Studio)
Android com Emulador: usar IP especifico 10.0.2.2 (Genymotion)
Android com físico: IP da máquina 

=========================MÓDULO 4================================
TypeScript:

Linguagem baseada em JavaScript com tipagens à mais e podendo acessar as features mais recentes

IntelliSense
Sem TypeScript: O editor não conhece o formato da variável user e, por isso, não consegue determinar suas propriedades
Com TypeScript: O editor consegue saber exatamente os dados que um usuário pode ter e oferecer inteligencia de IDE

Mitos e Verdade
 TypeScript não diminui a produtividade. 
 TypeScript não é transformar JavaScript em Java ou C#
 TypeScript não substitui o JavaScript por completo
 TypeScript não atrapalha quem é iniciante (até acostumar)
 O mercado usa TypeScript 
 
string, number, boolean, object, Array
interfaces

=========================MODULO 5===============================
Persistencia <-> Repositório <-> Rota

FIND e CREATE

Rota: Receber a requisição, chamar outro arquivo, devolver uma resposta.

=========================MODULO 6===============================
Docker:
Criação de ambientes isolados (container)
Containers expõe portas para comunicação

Principais conceitos;
Imagem
Container //instancia de uma imagem
Docker Registry (Docker Hub)
Dockerfile
 Receita de uma imagem


-----------------------------------------------------------------
SEMPRE QUE TEMOS UMA FUNCAO async (ASSINCRONA) RETORNAMOS UMA Promise<retorno>
-----------------------------------------------------------------
Conceitos de JWT (Json Web Token):

Metodologia de fazer autenticação em API REST 

==========================MODULO 9===============================
Arquitetura e testes no Node.js:

PASTAS:
src
 config
 database
 errors
 middlewares
 models
 repositories
 routes
 services

Domínio: Qual a área de conhecimento daquele módulo/arquivo

DDD: Domain Driven Design (metodologia)
TDD: Test Driven Development (metodologia)

ERA INDEX.TS


































 
